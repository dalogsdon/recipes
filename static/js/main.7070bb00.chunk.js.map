{"version":3,"sources":["recipes.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["recipes","au-gratin-potatoes","title","link","ingredients","steps","banana-pudding","TaskLi","state","done","toggleDone","_this","setState","classname","this","react_default","a","createElement","className","onClick","props","children","Component","Recipe","recipeName","match","params","recipe","href","target","rel","map","ing","Recipe_TaskLi","key","step","concat","Home","Object","keys","react_router_dom","to","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAmEeA,EAnEC,CACZC,qBAAsB,CAClBC,MAAO,qBACPC,KAAM,uDACNC,YAAa,CACT,gBACA,gBACA,eACA,oBACA,uBACA,cACA,6BAEJC,MAAO,CACH,cACA,0CACA,6CACA,0BACA,sBACA,2BACA,yBACA,qCACA,gBACA,yBACA,kCACA,2BACA,kBACA,mBACA,oBAGRC,iBAAkB,CACdJ,MAAO,iBACPC,KAAM,6EACNC,YAAa,CACT,YACA,eACA,4BACA,eACA,yBACA,oBACA,0BACA,qBAEJC,MAAO,CACH,cACA,4BACA,qCACA,0DACA,uBACA,eACA,6BACA,gBACA,kBACA,iDACA,wCACA,gDACA,gDACA,gDACA,kCACA,wDACA,+BACA,wCC1DNE,oNACFC,MAAQ,CACJC,MAAM,KAEVC,WAAa,kBAAMC,EAAKC,SAAS,CAAEH,MAAOE,EAAKH,MAAMC,gFAEjD,IAAMI,EAAYC,KAAKN,MAAMC,KAAO,OAAS,GAC7C,OACIM,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAAWM,QAASL,KAAKJ,YACnCI,KAAKM,MAAMC,iBATPC,cAuCNC,mLAtBP,IAAMC,EAAaV,KAAKM,MAAMK,MAAMC,OAAOC,OACrCA,EAAS3B,EAAQwB,GACvB,OAAKG,EAIDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAKU,EAAOzB,OACXyB,EAAOxB,MAAQY,EAAAC,EAAAC,cAAA,KAAGW,KAAMD,EAAOxB,KAAM0B,OAAO,SAASC,IAAI,uBAA1C,gBAChBf,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UACKU,EAAOvB,YAAY2B,IAAI,SAAAC,GAAG,OAAIjB,EAAAC,EAAAC,cAACgB,EAAD,CAAQC,IAAKF,GAAMA,MAEtDjB,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACKU,EAAOtB,MAAM0B,IAAI,SAAAI,GAAI,OAAIpB,EAAAC,EAAAC,cAACgB,EAAD,CAAQC,IAAKC,GAAOA,OAZtD,uBAAAC,OAA8BZ,UALrBF,mBCbrB,SAASe,IACL,OACItB,EAAAC,EAAAC,cAAA,UACKqB,OAAOC,KAAKvC,GAAS+B,IAAI,SAAAG,GAAG,OAAInB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMN,IAAKA,EAAKO,GAAIP,GAAMlC,EAAQkC,GAAKhC,eAsBzEwC,mLAfP,OACI3B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAG,KAAI1B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oBAGjBH,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjCtB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,KAAK,WAAWE,UAAWvB,aAVpCD,aCFEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7070bb00.chunk.js","sourcesContent":["const recipes = {\r\n    'au-gratin-potatoes': {\r\n        title: 'Au Gratin Potatoes',\r\n        link: 'https://www.spendwithpennies.com/au-gratin-potatoes/',\r\n        ingredients: [\r\n            'gold potatoes',\r\n            '3 tbsp butter',\r\n            '3 tbsp flour',\r\n            '1 tsp dry mustard',\r\n            '1/2 tsp onion powder',\r\n            '2 cups milk',\r\n            '1 cup extra sharp cheddar'\r\n        ],\r\n        steps: [\r\n            'Oven: 400 F',\r\n            'Mandoline slice potatoes 1/8 inch thick',\r\n            'Arrange potatoes vertically in baking dish',\r\n            'Melt butter on low heat',\r\n            'Add flour to butter',\r\n            'Whisk spices into butter',\r\n            'Whisk milk into butter',\r\n            'Whisk milk on med/high until thick',\r\n            'Turn off heat',\r\n            'Whisk cheese into milk',\r\n            'Pour cheese sauce over potatoes',\r\n            'Cover potatoes with foil',\r\n            'Bake for 1 hour',\r\n            'Uncover potatoes',\r\n            'Bake for 30 min'\r\n        ]\r\n    },\r\n    'banana-pudding': {\r\n        title: 'Banana Pudding',\r\n        link: 'https://www.foodnetwork.com/recipes/trisha-yearwood/banana-pudding-2283916',\r\n        ingredients: [\r\n            '3 bananas',\r\n            '4 large eggs',\r\n            '1/2 cup and 1/4 cup sugar',\r\n            '3 tbsp flour',\r\n            '1/2 tsp and pinch salt',\r\n            '2 cups whole milk',\r\n            '1/2 tsp vanilla extract',\r\n            '40 vanilla wafers'\r\n        ],\r\n        steps: [\r\n            'Oven: 425 F',\r\n            'Separate whites of 3 eggs',\r\n            'Combine 3 yolks with remaining egg',\r\n            'In saucepan whisk 1/2 cup sugar, flour and 1/2 tsp salt',\r\n            'Stir in yolk mixture',\r\n            'Stir in milk',\r\n            'Cook until thick (~10 min)',\r\n            'Turn off heat',\r\n            'Stir in vanilla',\r\n            'Spread thin layer of pudding in casserole dish',\r\n            'Place layer of vanilla wafers in dish',\r\n            'Place layer of 1/8 inch banana slices in dish',\r\n            'Continue layering and end with pudding on top',\r\n            'Beat egg whites and pinch of salt until stiff',\r\n            'Gradually beat in 1/4 cup sugar',\r\n            'Beat until whites don\\'t slide out of bowl when tilted',\r\n            'Spreak merengue onto pudding',\r\n            'Bake until lightly browned (5 min)'\r\n        ]\r\n    }\r\n}\r\n\r\nexport default recipes;\r\n","import React, { Component } from 'react';\r\nimport recipes from './recipes';\r\nimport './Recipe.css';\r\n\r\nclass TaskLi extends Component {\r\n    state = {\r\n        done: false\r\n    };\r\n    toggleDone = () => this.setState({ done: !this.state.done });\r\n    render() {\r\n        const classname = this.state.done ? 'done' : '';\r\n        return (\r\n            <li className={classname} onClick={this.toggleDone}>\r\n                {this.props.children}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Recipe extends Component {\r\n    render() {\r\n        const recipeName = this.props.match.params.recipe;\r\n        const recipe = recipes[recipeName];\r\n        if (!recipe) {\r\n            return `No recipe found for ${recipeName}`;\r\n        }\r\n        return (\r\n            <div className=\"recipe\">\r\n                <h1>{recipe.title}</h1>\r\n                {recipe.link && <a href={recipe.link} target=\"_blank\" rel=\"noopener noreferrer\">adapted from</a>}\r\n                <h2>Ingredients</h2>\r\n                <ol>\r\n                    {recipe.ingredients.map(ing => <TaskLi key={ing}>{ing}</TaskLi>)}\r\n                </ol>\r\n                <h2>Steps</h2>\r\n                <ol>\r\n                    {recipe.steps.map(step => <TaskLi key={step}>{step}</TaskLi>)}\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Recipe;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Recipe from './Recipe';\nimport recipes from './recipes';\nimport './App.css';\n\nfunction Home() {\n    return (\n        <ol>\n            {Object.keys(recipes).map(key => <li><Link key={key} to={key}>{recipes[key].title}</Link></li>)}\n        </ol>\n    );\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <nav>\n                        <Link to=\"/\"><h1 className=\"nav-title\">Drew's Recipes</h1></Link>\n                    </nav>\n\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/:recipe\" component={Recipe} />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}