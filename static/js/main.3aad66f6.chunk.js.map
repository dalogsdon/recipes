{"version":3,"sources":["recipes.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["recipes","au-gratin-potatoes","title","link","ingredients","steps","banana-pudding","instant-pot-risotto","fruit-slush","TaskLi","_ref","children","_useState","useState","_useState2","Object","slicedToArray","done","setDone","classname","react_default","a","createElement","className","onClick","Recipe","_ref2","recipeName","match","params","recipe","href","target","rel","map","ing","key","step","Home","keys","sort","react_router_dom","to","concat","App","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3aad66f6.chunk.js","sourcesContent":["const recipes = {\n    'au-gratin-potatoes': {\n        title: 'Au Gratin Potatoes',\n        link: 'https://www.spendwithpennies.com/au-gratin-potatoes/',\n        ingredients: [\n            'gold potatoes',\n            '3 tbsp butter',\n            '3 tbsp flour',\n            '1 tsp dry mustard',\n            '1/2 tsp onion powder',\n            '2 cups milk',\n            '1 cup extra sharp cheddar'\n        ],\n        steps: [\n            'Oven: 400 F',\n            'Mandoline slice potatoes 1/8 inch thick',\n            'Arrange potatoes vertically in baking dish',\n            'Melt butter on low heat',\n            'Add flour to butter',\n            'Whisk spices into butter',\n            'Whisk milk into butter',\n            'Whisk milk on med/high until thick',\n            'Turn off heat',\n            'Whisk cheese into milk',\n            'Pour cheese sauce over potatoes',\n            'Cover potatoes with foil',\n            'Bake for 1 hour',\n            'Uncover potatoes',\n            'Bake for 30 min'\n        ]\n    },\n    'banana-pudding': {\n        title: 'Banana Pudding',\n        link: 'https://www.foodnetwork.com/recipes/trisha-yearwood/banana-pudding-2283916',\n        ingredients: [\n            '3 bananas',\n            '4 large eggs',\n            '1/2 cup and 1/4 cup sugar',\n            '3 tbsp flour',\n            '1/2 tsp and pinch salt',\n            '2 cups whole milk',\n            '1/2 tsp vanilla extract',\n            '40 vanilla wafers'\n        ],\n        steps: [\n            'Oven: 425 F',\n            'Separate whites of 3 eggs',\n            'Combine 3 yolks with remaining egg',\n            'In saucepan whisk 1/2 cup sugar, flour and 1/2 tsp salt',\n            'Stir in yolk mixture',\n            'Stir in milk',\n            'Cook until thick (~10 min)',\n            'Turn off heat',\n            'Stir in vanilla',\n            'Spread thin layer of pudding in casserole dish',\n            'Place layer of vanilla wafers in dish',\n            'Place layer of 1/8 inch banana slices in dish',\n            'Continue layering and end with pudding on top',\n            'Beat egg whites and pinch of salt until stiff',\n            'Gradually beat in 1/4 cup sugar',\n            'Beat until whites don\\'t slide out of bowl when tilted',\n            'Spread merengue onto pudding',\n            'Bake until lightly browned (5 min)'\n        ]\n    },\n    'instant-pot-risotto': {\n        title: 'Instant Pot Risotto',\n        link: '',\n        ingredients: [\n            '2 tbsp olive oil',\n            '2 tbsp butter',\n            '1 shallot minced',\n            '1.5 cups arborio rice',\n            '1.5 cups white wine',\n            '2.75 cups reg sodium chicken broth',\n            '1/2 cup parmesan cheese shredded',\n            '1/4 tsp black pepper'\n        ],\n        steps: [\n            'Saute Instant Pot Setting',\n            'Heat the oil and butter',\n            'Add shallot and saute ~4 mins',\n            'Add rice, saute 1 min, fully coat rice with fat',\n            'Add wine, saute until liquid evaporates ~2 mins',\n            'Stir in broth, make sure rice is submerged',\n            'Secure lid, set pressure release to sealing',\n            'Cancel saute setting',\n            'Cook on manual for 5 mins at high pressure',\n            'Pressure release naturally for 10 mins',\n            'Pressure release venting for remaining steam',\n            'Stir in parmesan and pepper',\n            'Serve immediately'\n        ]\n    },\n    'fruit-slush': {\n        title: 'Fruit Slush',\n        link: '',\n        ingredients: [\n            '1 can frozen orange juice concentrate',\n            '1 can frozen lemonade concentrate',\n            '4 cups sugar',\n            '8 cups warm water',\n            '1 can pineapple (crushed or tidbits)',\n            '1 can mandarin oranges',\n            '3 bananas (sliced)',\n            '1 jar maraschino cherries'\n        ],\n        steps: [\n            'Dissolve sugar in the warm water',\n            'Add orange and lemonade concentrates',\n            'Add all fruit',\n            'Stir and put in freezer',\n            'Stir again after it starts to freeze to mix well'\n        ]\n    }\n}\n\nexport default recipes;\n","import React, { useState } from 'react';\nimport recipes from './recipes';\nimport './Recipe.css';\n\nfunction TaskLi({ children }) {\n    const [ done, setDone ] = useState(false);\n    const classname = done ? 'done' : '';\n    return (\n        <li className={classname} onClick={() => setDone(!done)}>\n            {children}\n        </li>\n    );\n}\n\nfunction Recipe({ match }) {\n    const recipeName = match.params.recipe;\n    const recipe = recipes[recipeName];\n    if (!recipe) {\n        return (\n            <div className=\"recipe\">\n                No recipe found for \"{recipeName}\"\n            </div>  \n        )\n    }\n    return (\n        <div className=\"recipe\">\n            <h1>{recipe.title}</h1>\n            {recipe.link && <a href={recipe.link} target=\"_blank\" rel=\"noopener noreferrer\">adapted from</a>}\n            <h2>Ingredients</h2>\n            <ul>\n                {recipe.ingredients.map(ing => <TaskLi key={ing}>{ing}</TaskLi>)}\n            </ul>\n            <h2>Steps</h2>\n            <ol>\n                {recipe.steps.map(step => <TaskLi key={step}>{step}</TaskLi>)}\n            </ol>\n        </div>\n    );\n}\n\nexport default Recipe;\n","import React from 'react';\n\n// NOTE: Must use HashRouter due to GitHub Pages limitations\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport Recipe from './Recipe';\nimport recipes from './recipes';\nimport './App.css';\n\nfunction Home() {\n    return (\n        <ol>\n            {\n                Object.keys(recipes).sort().map(key => \n                    <li key={key}>\n                        <Link to={`/${key}`}>{recipes[key].title}</Link>\n                    </li>\n                )\n            }\n        </ol>\n    );\n}\n\nfunction App() {\n    return (\n        <Router basename=\"/\">\n            <div>\n                <nav>\n                    <Link to=\"/\"><h1 className=\"nav-title\">Drew's Recipes</h1></Link>\n                </nav>\n\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/:recipe\" component={Recipe} />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}